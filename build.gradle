buildscript {
  repositories {
    jcenter()
  }
}

plugins {
  id 'com.diffplug.gradle.spotless' version '3.25.0'
  id 'com.github.jk1.dependency-license-report' version '1.11'
  id 'com.github.spotbugs' version '2.0.0'
  id 'com.jfrog.bintray' version '1.8.4'
  id 'org.owasp.dependencycheck' version '5.2.2'
  id 'net.researchgate.release' version '2.8.1'
}

repositories {
  jcenter()
  mavenCentral()
  google()
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'com.github.jk1.dependency-license-report'
apply plugin: 'com.github.spotbugs'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.owasp.dependencycheck'

description 'Asset Manager'
mainClassName = 'am.app.App'
def licenseName = 'The Apache Software License, Version 2.0'

defaultTasks 'clean', 'check', 'javadoc', 'installDist', 'generateLicenseReport', 'run'

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'com.github.mjeanroy', name: 'exiftool-lib', version: '2.5.0'
    implementation group: 'org.eclipse.rdf4j', name: 'rdf4j-repository-sparql', version: '3.0.0'
    implementation group: 'org.wikidata.wdtk', name: 'wdtk-wikibaseapi', version: '0.10.0'
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0'
    testImplementation 'junit:junit:4.12'
}

configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.group == 'com.fasterxml.jackson.core' && details.requested.name == 'jackson-databind') {
      details.useVersion '2.9.10'
      details.because 'CVE-2019-16335, CVE-2019-14540'
    }
    if (details.requested.group == 'commons-beanutils' && details.requested.name == 'commons-beanutils') {
      details.useVersion '1.9.4'
      details.because 'CVE-2019-10086'
    }
    if (details.requested.group == 'org.apache.commons' && details.requested.name == 'commons-compress') {
      details.useVersion '1.19'
      details.because 'CVE-2019-12402'
    }
  }
}

wrapper {
  gradleVersion = '5.6.2'
}

tasks.withType(JavaCompile) {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = sourceCompatibility
  options.debugOptions.debugLevel = 'lines,vars,source'
  options.encoding = java.nio.charset.StandardCharsets.UTF_8
  options.warnings = true
  options.deprecation = true
  options.compilerArgs += ['-Xlint:all', '-Werror']
}

def retrieveGitModification = { ->
  def baos = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'diff', '--shortstat'
    standardOutput = baos
  }
  return baos.toString().trim()
}

def retrieveGitRevision = { ->
  def baos = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', 'HEAD'
    standardOutput = baos
  }
  return baos.toString().trim()
}
def revision = retrieveGitRevision()
def modified = retrieveGitModification()
modified = !(modified == null || modified.trim().length() == 0)

def timeZone = java.util.TimeZone.getTimeZone(java.time.ZoneOffset.UTC)
def dateFormatter = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", java.util.Locale.ENGLISH)
dateFormatter.setTimeZone(timeZone)
def now = dateFormatter.format(new Date())
def gradleVersion = getProject().getGradle().getGradleVersion()
jar {
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Implementation-URL': 'https://github.com/marco-schmidt/am/',
      'Created-By': 'Gradle ' + gradleVersion,
      'Build-Date': now,
      'License': licenseName,
      'Main-Class': mainClassName,
      'Java-Version': targetCompatibility,
      'Git-Revision': revision,
      'Git-Modified': modified,
      'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '))
  }
  from ('.') {
    include 'LICENSE'
    into 'META-INF'
  }
}

run {
  args += ['--print-env', '-l', 'info']
}

// https://github.com/diffplug/spotless
spotless {
  java {
    licenseHeaderFile 'config/spotless/license-header.txt'
    removeUnusedImports()
    trimTrailingWhitespace()
    eclipse().configFile 'config/eclipse/formatter.xml'
  }
}

// https://github.com/checkstyle/checkstyle
// http://checkstyle.sourceforge.net
checkstyle {
  toolVersion '8.24'
  ignoreFailures false
  showViolations true
  configDir = file("${rootDir}/config/checkstyle")
}

// https://github.com/spotbugs/spotbugs
spotbugs {
  toolVersion = '3.1.12'
  effort = 'max' // min, default, max
  reportLevel = 'low' // low, medium, high  
  ignoreFailures = false
  excludeFilter = file('config/spotbugs/excludeBugsFilter.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
    html.stylesheet resources.text.fromFile('config/spotbugs/report-stylesheet.xsl')
  }
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
  publications {
    library(MavenPublication) {
      from components.java
      artifact packageSources
      artifact packageJavadoc
      groupId 'com.github.marco-schmidt'
      pom.withXml {
        asNode().appendNode('name', project.name)
        asNode().appendNode('url', 'https://github.com/marco-schmidt/am')
        asNode().appendNode('description', description)
        asNode().appendNode('packaging', 'jar')
        asNode().appendNode('inceptionYear', '2019')
        asNode().appendNode('properties').
          appendNode('gitrevision', revision).parent().
          appendNode('gitmodified', modified).parent().
          appendNode('buildtime', now).parent().
          appendNode('gradleversion', gradleVersion).parent().
          appendNode('java', targetCompatibility)
        asNode().appendNode('scm').
          appendNode('connection', 'scm:git:git@github.com:marco-schmidt/am.git').parent().
          appendNode('developerConnection', 'scm:git:git@github.com:marco-schmidt/am.git').parent().
          appendNode('url', 'https://github.com/marco-schmidt/am')
        asNode().appendNode('developers').appendNode('developer').
          appendNode('id', 'marco-schmidt').parent().
          appendNode('name', 'Marco Schmidt').parent().
          appendNode('email', 'mschmidtgit@protonmail.com').parent().
          appendNode('organization', 'private').parent().
          appendNode('organizationUrl', 'https://github.com/marco-schmidt')
        asNode().appendNode('licenses').appendNode('license').
          appendNode('name', licenseName).parent().
          appendNode('url', 'https://www.apache.org/licenses/LICENSE-2.0.html')
      }
    }
  }
}

// https://github.com/bintray/bintray-examples/tree/master/gradle-bintray-plugin-examples/publications-example
// usage: ./gradlew -PbintrayUser=marco-schmidt -PbintrayApiKey=... bintrayUpload
bintray {
  user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
  publications = ['library']
  publish = true // auto-publish after upload
  pkg {
    repo = 'am'
    name = 'maven'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/marco-schmidt/am.git'
    publicDownloadNumbers = false
    version {
      name = project.version
      released  = new Date()
    }
  }
}
afterReleaseBuild.dependsOn = [bintrayUpload]

dependencyCheck {
  cveValidForHours=24
  failBuildOnCVSS=0
  analyzers {
    assemblyEnabled=false
  }
}
check.dependsOn dependencyCheckAnalyze

licenseReport {
  allowedLicensesFile = new File("$projectDir/config/licenseReport/allowed-licenses.json")
}
check.dependsOn checkLicense
